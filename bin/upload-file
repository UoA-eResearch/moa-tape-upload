#!/usr/local/bin/ruby
# Upload a file to the Object Store.
# Default is not to overwrite an existing object.
require 'optparse'
require_relative '../rlib/aws_connection.rb'

Signal.trap('INT') { exit 2 }
Signal.trap('TERM') { exit 15 }

# parse command line arguments
# Sets @options based on command line args
def parse_options
  @options = {}
  @optparse = OptionParser.new do |opts|
    opts.banner = 'Usage: upload-file [options]'

    # Define the options, and what they do
    @options[:filename] = nil
    opts.on( '-f', '--filename FILENAME', String, 'File to upload to Object Store)' ) do |filename|
      @options[:filename] = filename
    end

    # Define the options, and what they do
    @options[:object] = nil
    opts.on( '-o', '--object FILENAME', String, 'Object name to copy file to)' ) do |object|
      @options[:object] = object
    end

    @options[:not_if_exits] = true
    opts.on( '-u', '--update', 'Overwrite the object, if it exists' ) do
      @options[:not_if_exits] = false
    end

    @options[:verbose] = false
    opts.on( '-v', '--verbose', 'Output more information' ) do
      @options[:verbose] = true
    end

    opts.on( '-?', '--help', 'Display this screen' ) do
      puts opts
      exit 0
    end
  end

  @optparse.parse!

  if @options[:filename].nil? || @options[:object].nil?
    puts @optparse.to_s
    exit(-1)
  end
end

parse_options

# Get an S3 connection through to the UoA object store
# aws = AWS_connection.new(config_file: "#{File.expand_path(File.dirname(__FILE__))}/../conf/conf_internal_test.json")   #We are inside the Uni network testing
aws = AWS_connection.new(config_file: "#{__dir__}/../conf/conf_internal.json")   # We are inside the Uni network
# aws = AWS_connection.new(config_file: "#{File.expand_path(File.dirname(__FILE__))}/../conf/conf_external.json")  #We are outside the Uni network

begin
  if File.stat(@options[:filename]).file?
    aws.object_put_file(key: @options[:object], filename: @options[:filename], not_if_exits: @options[:not_if_exits])
  else
    puts 'Can only upload files.'
  end
rescue StandardError => e
  puts "Upload failed with: #{e}"
end
