#!/usr/local/bin/ruby
require 'optparse'
require 'digest'
require_relative '../rlib/walk_dir.rb'
require_relative '../rlib/fits_metadata.rb'

Signal.trap('INT') { exit 2 }
Signal.trap('TERM') { exit 15 }

# Index objects by their md5 checksum
# Use arrays for the object name, as there may be collisions.
@object_store_md5 = {}
@object_store_dir = {}

def preload_object_store_md5s(filename:)
  File.read(filename).each_line do |l|
    l.chomp!
    l.gsub(/^(.*)\s([0-9A-Fa-f])$/, "\1\t\2")
    tokens = l.split("\t")
    if tokens.nil? || tokens.length != 2
      puts l
    else
      # Array of object names with this MD5
      @object_store_md5[tokens[1]] ||= []
      @object_store_md5[tokens[1]] << tokens[0]
      @object_store_dir[File.basename(tokens[0])] = tokens[0]
    end
  end
end

def exists(filename:, object_name:, aws_md5:)
  md5_match = false
  if ! (sr = @object_store_md5[aws_md5]).nil?
    sr.each do |on|
      if File.basename(object_name) == File.basename(on)
        md5_match = true
        puts "md5 match for #{filename} => #{object_name}"
      end
    end
  end

  if @object_store_dir[File.basename(filename)] != nil
    puts "Filename match for #{filename} => #{object_name}"
    `/bin/rm -f #{filename}` if md5_match == true
  end
end

# Uses systems md5sum to fetch the file's md5. This is wrong, if the S3 object uses chunks to upload the file.
# @param filename [String] Path to the file
# @return md5 [String] MD5 checksum as a hexstring (Mac/FreeBSD equivalent is /sbin/md5. Linux equivalent is /usr/bin/md5sum)
def file_md5(filename:)
  md5 = `/usr/bin/md5sum #{filename}`.split(' ')[0].strip # Linux
  return $? == 0 ? md5 : nil
  # `/sbin/md5 #{filename}`.split(' ')[-1].strip # Mac OS
end

# Calculate a local files MD5, if we upload with chunks.
#
# @param filename [String] Path/name of local file to MD5
# @param chunksize [Integer] size of uploaded chunks.
# @return [String] MD5 as a Hex String
def file_md5_chunked(filename:, chunksize:)
  # stat_record = File.stat(filename)
  md5 = Digest::MD5.new
  File.open(filename, 'rb') do |fd|
    while (buffer = fd.read(chunksize))
      md5.update(buffer)
    end
  end
  return md5.hexdigest # , stat_record.size
end

def validate_directory(directory: )
  # Just look at this dir, not its subdirectories.
  walk_dir(directory: directory) do |full_name, dir, fn|
    begin
      case File.extname(fn)
      when '.fit', '.fits' # Astro image format.
        fm = Fits_metadata.new(directory: dir, filename: fn)
        key = "#{fm.obj_path}/#{fn}"
        file_md5 = file_md5(filename: full_name)
        exists(filename: full_name, object_name: key, aws_md5: file_md5)
      end
    rescue StandardError => e
      $stderr.puts "validate_directory \"#{full_name}\": #{e}"
    end
  end
end

# parse command line arguments
# Sets @options based on command line args
def parse_options
  @options = {}
  @optparse = OptionParser.new do |opts|
    opts.banner = 'Usage: validate-upload [options] directory ...'

    # Define the options, and what they do
    @options[:filename] = nil
    opts.on( '-f', '--filename FILENAME', String, 'File built from moa-ls -Rm (object-name aws-md5)' ) do |filename|
      @options[:filename] = filename
    end

    @options[:verbose] = false
    opts.on( '-v', '--verbose', 'Output more information' ) do
      @options[:verbose] = true
    end

    opts.on( '-?', '--help', 'Display this screen' ) do
      puts opts
      exit 0
    end
  end

  @optparse.parse!

  if @options[:filename].nil? || ARGV.length == 0
    puts @optparse.to_s
    exit(-1)
  end
end

parse_options

puts '*********** Loading Source 1 ************'
preload_object_store_md5s(filename: @options[:filename])
ARGV.each do |d|
  puts "*********** Checking Files in #{d} ************"
  validate_directory(directory: d)
end
puts 'done'
